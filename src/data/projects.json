[
  {
    "title": "Software Architecture Master-Slave",
    "description": "Based on the use of UGVs and ROS2 Humble, applying software architecture techniques and robust design patterns. The results confirmed that, under the master-slave structure, the system completes all assigned tasks, even in case of failure of one or more robots.",
    "image": "/assets/master_slave.png",
    "technologies": ["ROS2", "Multi-robot", "SLAM", "Nav2", "Python"],
    "github": "https://github.com/iesusdavila/master_slave_mrs",
    "demo": "https://youtu.be/fS6GwS7P4-A",
    "categories": ["robotics", "nav2", "ros"]
  },
  {
    "title": "Multi Robot System",
    "description": "Multi Robot System developed for ROS2 Humble, allows the easy incorporation of several robot models with little configuration. There is no limit on the number of robots, if you incorporate UGV you can provide your parameter file for autonomous navigation.",
    "image": "/assets/multi_robot.png",
    "technologies": ["ROS2", "Multi-robot", "Nav2", "Python"],
    "github": "https://github.com/iesusdavila/multi_robot",
    "demo": "https://youtu.be/fS6GwS7P4-A" ,
    "categories": ["robotics", "nav2", "ros"]
  },
  {
    "title": "AUV Max: Simulator for Autonomous Underwater Vehicles",
    "description": "It focuses on the development of a submersible UAV, using advanced technologies in robotics, automatic control and machine vision. Developed with ROS2 Humble, Gazebo Garden 7 and Rviz2, this project represents a pioneering effort in the simulation and operation of autonomous underwater vehicles.",
    "image": "/assets/auv_max.png",
    "technologies": ["ROS2", "Computer Vision", "C++", "Python"],
    "github": "https://github.com/RAMEL-ESPOL/UnderwaterVehicleSimulator",
    "categories": ["robotics", "ros", "computer-vision", "ai"]
  },
  {
    "title": "Follower Car",
    "description": "Follower algorithm for TurtleBot3 and ROVER using only 2D LIDAR and traditional control techniques. The algorithm can be run on N robots, achieving a chain of follower robots. No machine vision or anything similar is used in the algorithm.",
    "image": "/assets/follower_robot.png",
    "technologies": ["ROS2", "Control", "C++", "Python"],
    "github": "https://github.com/iesusdavila/follower_car/tree/humble-devel",
    "demo": "https://youtu.be/71NROFKV50Q",
    "categories": ["robotics", "ros"]
  },
  {
    "title": "KUKA Kr210 - Pick and Place",
    "description": "It uses ROS Noetic and MoveIt for motion planning and OpenCV for real-time object detection based on color segmentation. The system ensures accurate trajectory execution and seamless communication between perception and control, enabling efficient and autonomous pick and place operations.",
    "image": "/assets/pick_place.png",
    "technologies": ["ROS2", "Industrial Automation", "Computer Vision", "MoveIt", "Python"],
    "github": "https://github.com/iesusdavila/kuka_kr210-pick-place/tree/main",
    "demo": "https://youtu.be/OrNDWy7UmwY",
    "categories": ["robotics", "computer-vision", "ai", "ros"]
  }
]
